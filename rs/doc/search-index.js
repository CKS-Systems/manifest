var searchIndex = new Map(JSON.parse('[\
["hypertree",{"doc":"","t":"CCQCFFNNNNNNNNNNNNNNNNNNNNNNNSFSFFFFFKKNNNNNNNNNNNNNNNNNNNNNNNNNMNNNMNNMNNMNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNIFNNNNNNNNNNHHNNNNNN","n":["free_list","red_black_tree","trace","utils","FreeList","FreeListNode","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","from","from","get_head","into","into","is_valid_bit_pattern","new","remove","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","NIL","RBNode","RBTREE_OVERHEAD_BYTES","RedBlackTree","RedBlackTreeIntoIterator","RedBlackTreeIterator","RedBlackTreeReadOnly","RedBlackTreeReadOnlyIterator","TreeReadOperations","TreeValue","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","default","eq","fmt","fmt","from","from","from","from","from","from","get_max_index","get_max_index","get_max_index","get_mut_value","get_predecessor_index","get_predecessor_index","get_predecessor_index","get_root_index","get_root_index","get_root_index","get_successor_index","get_successor_index","get_successor_index","get_value","insert","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","is_valid_bit_pattern","iter","iter","lookup_index","lookup_index","lookup_index","new","new","next","next","next","partial_cmp","remove_by_index","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","DataIndex","PodBool","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","from","from_bool","get_helper","get_mut_helper","into","is_valid_bit_pattern","to_owned","try_from","try_into","type_id"],"q":[[0,"hypertree"],[4,"hypertree::free_list"],[29,"hypertree::red_black_tree"],[122,"hypertree::utils"],[142,"bytemuck::pod"],[143,"core::clone"],[144,"core::default"],[145,"core::result"],[146,"core::any"],[147,"core::cmp"],[148,"core::fmt"],[149,"core::fmt"],[150,"alloc::string"]],"d":["","","","","","","Free a node to the free list","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Gets the index of head.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new free list. Assumes that the data within data …","Free the node at index","","","","","","","","","Node in a RedBlack tree. The first 16 bytes are used for …","","A Red-Black tree which supports random access O(log n), …","","","A Red-Black tree which supports random access O(log n) and …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Get the max index. If a tree set this to NIL on a …","Get the max index. If a tree set this to NIL on a …","","","Get the previous index. This walks the tree, so does not …","Get the previous index. This walks the tree, so does not …","","Get the current root index.","Get the current root index.","","Get the next index. This walks the tree, so does not care …","Get the next index. This walks the tree, so does not care …","","Insert and rebalance. The data at index should be already …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Sorted iterator starting from the min.","Sorted iterator starting from the min.","","Lookup the index of a given value.","Lookup the index of a given value.","Creates a new RedBlackTree. Does not mutate data yet. …","Creates a new RedBlackTree. Does not mutate data yet. …","","","","","Remove a node by index and rebalance.","","","","","","","","","","","","","","","","","","","","","","The standard <code>bool</code> is not a <code>Pod</code>, define a replacement that …","","","","","","","","Returns the argument unchanged.","","","Read a struct of type T in an array of data at a given …","Read a struct of type T in an array of data at a given …","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,0,0,0,0,0,1,1,5,1,5,5,5,5,1,5,1,1,5,5,1,1,5,1,5,1,5,1,5,0,0,0,0,0,0,0,0,0,0,22,25,24,26,23,13,22,25,24,26,23,13,13,13,13,13,13,13,13,22,25,24,26,23,13,20,22,25,13,20,22,25,20,22,25,20,22,25,13,22,22,25,24,26,23,13,22,24,26,23,13,22,25,20,22,25,22,25,24,26,23,13,22,13,13,22,25,24,26,23,13,22,25,24,26,23,13,22,25,24,26,23,13,0,0,29,29,29,29,29,29,29,29,29,29,0,0,29,29,29,29,29,29],"f":"``````{{{b{c}}d}fh}{ce{}{}}000{{{j{c}}}{{j{c}}}l}{{ce}f{}{}}{{}{{j{c}}}n}{cc{}}0{{{b{c}}}dh}55{cA`{}}{{{Ad{Ab}}d}{{b{c}}}h}27{c{{Af{e}}}{}{}}000{cAh{}}0``````````999999999999{{{Aj{c}}}{{Aj{c}}}l}8{{{Aj{c}}{Aj{c}}}AlAn}{{}{{Aj{c}}}n}{{{Aj{c}}{Aj{c}}}A`An}{{{Aj{c}}B`}{{Af{fBb}}}An}{{{Aj{c}}B`}BdBf};;;;;;{Bhd}{cBj{}}0{{{Aj{c}}}cAn}{{Bhd}d}{{cBj}Bj{}}04331002{{{Bl{c}}dc}fAn}{ce{}{}}00000{{{Bl{c}}}{{Bn{c}}}An}111{cA`{}}{{{Bl{c}}}{{C`{c}}}An}{{{Cb{c}}}{{Cd{c}}}An}{{Bhc}dAn}{{ce}Bj{}An}0{{{Ad{Ab}}dd}{{Bl{c}}}An}{{{Ad{Ab}}dd}{{Cb{c}}}An}{{{C`{c}}}{{Cf{e}}}An{}}{{{Cd{c}}}{{Cf{e}}}An{}}{{{Bn{c}}}{{Cf{e}}}An{}}{{{Aj{c}}{Aj{c}}}{{Cf{Al}}}An}{{{Bl{c}}d}fAn}={cCh{}}{c{{Af{e}}}{}{}}00000000000{cAh{}}00000``{ce{}{}}0{CjCj}{{ce}f{}{}}{{}Cj}{{CjCj}A`}{{CjB`}Bd}{cc{}}{A`Cj}0{{{Ad{Ab}}d}ch}08{cA`{}}9;;:","c":[],"p":[[5,"FreeList",4],[8,"DataIndex",122],[1,"unit"],[10,"Pod",142],[5,"FreeListNode",4],[10,"Clone",143],[10,"Default",144],[1,"bool"],[1,"u8"],[1,"slice"],[6,"Result",145],[5,"TypeId",146],[5,"RBNode",29],[6,"Ordering",147],[10,"TreeValue",29],[5,"Formatter",148],[5,"Error",148],[8,"Result",148],[10,"Debug",148],[10,"TreeReadOperations",29],[1,"u32"],[5,"RedBlackTree",29],[5,"RedBlackTreeIntoIterator",29],[5,"RedBlackTreeIterator",29],[5,"RedBlackTreeReadOnly",29],[5,"RedBlackTreeReadOnlyIterator",29],[6,"Option",149],[5,"String",150],[5,"PodBool",122]],"b":[[56,"impl-Display-for-RBNode%3CV%3E"],[57,"impl-Debug-for-RBNode%3CV%3E"]]}],\
["manifest",{"doc":"Manifest is a limit order book exchange on the Solana …","t":"SHHQQHCQQHCCJCCCFFFFKFFFFFFFOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNHNNNNNNNNNNNOOOOONNNNNNNNNNNONNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOONNNNNNNNNNNOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCCCCPPPPPPPPPPGPPPPPPPHNNNNNNNNNNNNNPPPPPPPPPGPPNNNNNNNNNNNNNNNNNNNNCCCCCCCCCCCHHHHHHHHHHHHCCCCCCCCCCCCFFFFNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNONNNNNNNNNNNNNNNNNFONNNNNNNNNNNNNFONNNNNNNNNNNNNHHHFNNNNNNNNNNNNNFONNNNNNNNNNNNNFFTTTTTFFFKTTTTNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCCCCCCCFONNNNNNNNNNNNNNNNNNONNONNNNSSSSSSSSSSSKKFNNNNNNNNNNNNMNMNONONNNNNNNNNNNNNNNNNNNNNNNFIIFFIIIIINNNNNNNNNNNNNNNNNNNNNNNOOOONNNNNNOOONNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFIIIIFIIIONNNNNNNNNNNNNNNOOOOOOONNNNNNNNNNNNNONNNNONOONOOOOOONONNNNNNNNNNNNNPPPGPPFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHNNNNNNNNNNNNNNNNHHCCCCFNNNNNOONOOOOONNNNKFNNNNNNNNNHONNNNNNNMNFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFNNNNNNNNNNNNNNNNNHHOONNONNNNNNNNNNNNNN","n":["ID","check_id","entrypoint","global_vault_seeds","global_vault_seeds_with_bump","id","logs","market_vault_seeds","market_vault_seeds_with_bump","process_instruction","program","quantities","security_txt","state","utils","validation","CancelOrderLog","ClaimSeatLog","CreateMarketLog","DepositLog","Discriminant","FillLog","GlobalAddTraderLog","GlobalClaimSeatLog","GlobalCreateLog","GlobalDepositLog","PlaceOrderLog","WithdrawLog","_padding","_padding","amount_atoms","amount_atoms","base_atoms","base_atoms","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","creator","creator","deref_or_borrow","deref_or_borrow","deref_or_borrow","deref_or_borrow","deref_or_borrow","deref_or_borrow","deref_or_borrow","deref_or_borrow","deref_or_borrow","deref_or_borrow","deref_or_borrow","deref_or_borrow_mut","deref_or_borrow_mut","deref_or_borrow_mut","deref_or_borrow_mut","deref_or_borrow_mut","deref_or_borrow_mut","deref_or_borrow_mut","deref_or_borrow_mut","deref_or_borrow_mut","deref_or_borrow_mut","deref_or_borrow_mut","discriminant","discriminant","discriminant","discriminant","discriminant","discriminant","discriminant","discriminant","discriminant","discriminant","discriminant","discriminant","emit_stack","from","from","from","from","from","from","from","from","from","from","from","global","global","global","global","global_atoms","into","into","into","into","into","into","into","into","into","into","into","is_bid","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","last_valid_slot","maker","market","market","market","market","market","market","market","market","mint","mint","order_index","order_sequence_number","order_sequence_number","order_type","price","price","quote_atoms","taker","taker_is_buy","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","trader","trader","trader","trader","trader","trader","trader","trader","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","error","instruction","instruction_builders","processor","AlreadyClaimedSeat","AlreadyExpired","GlobalInsufficient","InsufficientOut","InvalidCancel","InvalidDepositAccounts","InvalidFreeList","InvalidMarketParameters","InvalidPlaceOrderFromWalletParams","InvalidWithdrawAccounts","ManifestError","MissingGlobal","OrderTooSmall","OrderWouldOverflow","Overflow","PostOnlyCrosses","PriceNotPositive","WrongIndexHintParams","assert_with_msg","borrow","borrow_mut","deref_or_borrow","deref_or_borrow_mut","fmt","fmt","from","into","to_string","try_from","try_into","type_id","vzip","BatchUpdate","ClaimSeat","CreateMarket","Deposit","Expand","GlobalAddTrader","GlobalClaimSeat","GlobalCreate","GlobalDeposit","ManifestInstruction","Swap","Withdraw","borrow","borrow_mut","clone","clone_into","deref_or_borrow","deref_or_borrow_mut","eq","equivalent","equivalent","fmt","from","into","to_owned","to_vec","try_from","try_from","try_from_primitive","try_into","type_id","vzip","batch_update_instruction","claim_seat_instruction","create_market_instructions","deposit_instruction","expand_instruction","global_add_trader_instruction","global_claim_seat_instruction","global_create_instruction","global_deposit_instruction","swap_instruction","withdraw_instruction","batch_update_instruction","claim_seat_instruction","create_market_instruction","create_market_instructions","deposit_instruction","expand_instruction","global_add_trader_instruction","global_claim_seat_instruction","create_global_instruction","global_deposit_instruction","swap_instruction","withdraw_instruction","batch_update","claim_seat","create_market","deposit","expand","global_add_trader","global_claim_seat","global_create","global_deposit","shared","swap","withdraw","BatchUpdateParams","BatchUpdateReturn","CancelOrderParams","PlaceOrderParams","base_atoms","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cancels","clone","clone","clone_into","clone_into","deref_or_borrow","deref_or_borrow","deref_or_borrow","deref_or_borrow","deref_or_borrow_mut","deref_or_borrow_mut","deref_or_borrow_mut","deref_or_borrow_mut","deserialize","deserialize","deserialize","deserialize","fmt","fmt","from","from","from","from","into","into","into","into","is_bid","last_valid_slot","new","new","new","new_with_hint","order_index_hint","order_sequence_number","order_type","orders","orders","serialize","serialize","serialize","serialize","to_owned","to_owned","trader_index_hint","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_price","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","DepositParams","amount_atoms","borrow","borrow_mut","deref_or_borrow","deref_or_borrow_mut","deserialize","from","into","new","serialize","try_from","try_into","type_id","vzip","GlobalDepositParams","amount_atoms","borrow","borrow_mut","deref_or_borrow","deref_or_borrow_mut","deserialize","from","into","new","serialize","try_from","try_into","type_id","vzip","get_dynamic_account","get_dynamic_value","get_mut_dynamic_account","SwapParams","borrow","borrow_mut","deref_or_borrow","deref_or_borrow_mut","deserialize","from","into","new","serialize","try_from","try_into","type_id","vzip","WithdrawParams","amount_atoms","borrow","borrow_mut","deref_or_borrow","deref_or_borrow_mut","deserialize","from","into","new","serialize","try_from","try_into","type_id","vzip","BaseAtoms","GlobalAtoms","MAX","MIN","ONE","ONE","ONE","PriceConversionError","QuoteAtoms","QuoteAtomsPerBaseAtom","WrapperU64","ZERO","ZERO","ZERO","ZERO","add","add","add","add_assign","add_assign","add_assign","as_u64","as_u64","as_u64","as_u64","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_add","checked_add","checked_add","checked_base_for_quote","checked_effective_price","checked_mul","checked_quote_for_base","checked_sub","checked_sub","checked_sub","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","default","default","default","default","deref_or_borrow","deref_or_borrow","deref_or_borrow","deref_or_borrow","deref_or_borrow","deref_or_borrow_mut","deref_or_borrow_mut","deref_or_borrow_mut","deref_or_borrow_mut","deref_or_borrow_mut","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","into","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","min","min","min","new","new","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from_mantissa_and_exponent","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","claimed_seat","constants","dynamic_account","global","market","resting_order","utils","ClaimedSeat","base_withdrawable_balance","borrow","borrow_mut","clone","clone_into","cmp","default","deref_or_borrow","deref_or_borrow_mut","eq","equivalent","equivalent","fmt","fmt","from","into","is_valid_bit_pattern","new_empty","partial_cmp","quote_withdrawable_balance","to_owned","to_string","trader","try_from","try_into","type_id","vzip","BLOCK_SIZE","CLAIMED_SEAT_SIZE","FREE_LIST_BLOCK_SIZE","GLOBAL_FIXED_DISCRIMINANT","GLOBAL_FIXED_SIZE","GLOBAL_TRADER_MARKET_INFO_SIZE","GLOBAL_TRADER_SIZE","MARKET_FIXED_DISCRIMINANT","MARKET_FIXED_SIZE","NO_EXPIRATION_LAST_VALID_SLOT","RESTING_ORDER_SIZE","DerefOrBorrow","DerefOrBorrowMut","DynamicAccount","add_order","add_trader","borrow","borrow_mut","cancel_order","cancel_order_by_index","claim_seat","claim_seat_on_market","clone","clone_into","deposit","deposit_global","deref_or_borrow","deref_or_borrow","deref_or_borrow_mut","deref_or_borrow_mut","dynamic","expand_unchecked","fixed","from","get_balance_atoms","get_base_mint","get_order_by_index","get_quote_mint","get_trader_balance","get_trader_index","get_trader_key_by_index","global_expand","impact_base_atoms","impact_quote_atoms","into","market_expand","place_order","reduce","release_seat","remove_order","to_owned","try_from","try_into","type_id","vzip","withdraw","GlobalFixed","GlobalRef","GlobalRefMut","GlobalTrader","GlobalTraderMarketInfo","GlobalTraderMarketInfoTree","GlobalTraderMarketInfoTreeReadOnly","GlobalTraderTree","GlobalTraderTreeReadOnly","GlobalValue","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","default","default","default","deref_or_borrow","deref_or_borrow","deref_or_borrow","deref_or_borrow_mut","deref_or_borrow_mut","deref_or_borrow_mut","discriminant","dynamic","dynamic","dynamic","eq","eq","equivalent","equivalent","equivalent","equivalent","fixed","fixed","fixed","fmt","fmt","from","from","from","get_global_trader_market_info","get_global_traders_root_index","get_mint","get_num_atoms","get_trader","get_vault","get_vault_bump","into","into","into","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","new_empty","new_empty","new_empty","partial_cmp","partial_cmp","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify_discriminant","vzip","vzip","vzip","AddOrderToMarketArgs","AddOrderToMarketResult","Bookside","BooksideReadOnly","ClaimedSeatTree","ClaimedSeatTreeReadOnly","MarketFixed","MarketRef","MarketRefMut","MarketValue","base_atoms_traded","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","deref_or_borrow","deref_or_borrow","deref_or_borrow","deref_or_borrow_mut","deref_or_borrow_mut","deref_or_borrow_mut","discriminant","dynamic","dynamic","dynamic","fixed","fixed","fixed","from","from","from","get_asks_root_index","get_base_mint","get_base_mint_decimals","get_base_vault","get_base_vault_bump","get_bids_root_index","get_quote_mint","get_quote_mint_decimals","get_quote_vault","get_quote_vault_bump","global_trade_accounts_opts","has_free_block","into","into","into","is_bid","is_valid_bit_pattern","last_valid_slot","market","new_empty","num_base_atoms","order_index","order_sequence_number","order_type","price","quote_atoms_traded","to_owned","trader_index","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify_discriminant","vzip","vzip","vzip","Global","ImmediateOrCancel","Limit","OrderType","PostOnly","PostOnlySlide","RestingOrder","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","default","default","deref_or_borrow","deref_or_borrow","deref_or_borrow_mut","deref_or_borrow_mut","deserialize","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","get_is_bid","get_num_base_atoms","get_order_type","get_price","get_sequence_number","get_trader_index","into","into","is_expired","is_global","is_valid_bit_pattern","is_valid_bit_pattern","new","order_type_can_rest","order_type_can_take","partial_cmp","reduce","serialize","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from_primitive","try_into","try_into","type_id","type_id","vzip","vzip","create_account","get_discriminant","loaders","manifest_checker","solana_checkers","token_checkers","GlobalTradeAccounts","borrow","borrow_mut","deref_or_borrow","deref_or_borrow_mut","from","global","global_vault","into","market","market_vault","mint","token_program","trader","try_from","try_into","type_id","vzip","ManifestAccount","ManifestAccountInfo","borrow","borrow_mut","clone","clone_into","deref","deref_or_borrow","deref_or_borrow_mut","from","get_fixed","get_global_address","info","into","new","new_init","to_owned","try_from","try_into","type_id","verify_discriminant","vzip","EmptyAccount","Program","Signer","TokenProgram","as_ref","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref_or_borrow","deref_or_borrow","deref_or_borrow","deref_or_borrow","deref_or_borrow_mut","deref_or_borrow_mut","deref_or_borrow_mut","deref_or_borrow_mut","from","from","from","from","info","info","info","info","into","into","into","into","new","new","new","new","new_payer","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","MintAccountInfo","TokenAccountInfo","as_ref","as_ref","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref_or_borrow","deref_or_borrow","deref_or_borrow_mut","deref_or_borrow_mut","from","from","get_global_vault_address","get_vault_address","info","info","into","into","mint","new","new","new_with_owner","new_with_owner_and_key","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":[[0,"manifest"],[16,"manifest::logs"],[238,"manifest::program"],[242,"manifest::program::error"],[274,"manifest::program::instruction"],[306,"manifest::program::instruction_builders"],[317,"manifest::program::instruction_builders::batch_update_instruction"],[318,"manifest::program::instruction_builders::claim_seat_instruction"],[319,"manifest::program::instruction_builders::create_market_instructions"],[321,"manifest::program::instruction_builders::deposit_instruction"],[322,"manifest::program::instruction_builders::expand_instruction"],[323,"manifest::program::instruction_builders::global_add_trader_instruction"],[324,"manifest::program::instruction_builders::global_claim_seat_instruction"],[325,"manifest::program::instruction_builders::global_create_instruction"],[326,"manifest::program::instruction_builders::global_deposit_instruction"],[327,"manifest::program::instruction_builders::swap_instruction"],[328,"manifest::program::instruction_builders::withdraw_instruction"],[329,"manifest::program::processor"],[341,"manifest::program::processor::batch_update"],[416,"manifest::program::processor::deposit"],[431,"manifest::program::processor::global_deposit"],[446,"manifest::program::processor::shared"],[449,"manifest::program::processor::swap"],[463,"manifest::program::processor::withdraw"],[478,"manifest::quantities"],[636,"manifest::state"],[643,"manifest::state::claimed_seat"],[671,"manifest::state::constants"],[682,"manifest::state::dynamic_account"],[727,"manifest::state::global"],[814,"manifest::state::market"],[891,"manifest::state::resting_order"],[954,"manifest::utils"],[956,"manifest::validation"],[960,"manifest::validation::loaders"],[978,"manifest::validation::manifest_checker"],[1000,"manifest::validation::solana_checkers"],[1071,"manifest::validation::token_checkers"],[1111,"solana_program::pubkey"],[1112,"solana_program::account_info"],[1113,"solana_program::entrypoint"],[1114,"solana_program::program_error"],[1115,"core::result"],[1116,"bytemuck::pod"],[1117,"core::any"],[1118,"core::convert"],[1119,"core::fmt"],[1120,"core::fmt"],[1121,"alloc::vec"],[1122,"num_enum"],[1123,"hypertree::utils"],[1124,"core::option"],[1125,"solana_program::instruction"],[1126,"std::io::error"],[1127,"std::io"],[1128,"core::cell"],[1129,"core::cell"],[1130,"core::clone"],[1131,"core::marker"],[1132,"solana_program::rent"]],"d":["The const program ID.","Returns <code>true</code> if given pubkey is the program ID.","Safety","","","Returns the program ID.","","","","","","","Static string containing the security.txt file.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Serialize and log an event","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Batch update with multiple place orders and cancels.","Allocate a seat","Create a market","Deposit","Expand a market.","Add a trader to the global account.","Claim seat on a market.","Create global account for a given token.","Create global account for a given token.","Instructions available for the Manifest program","Places an order using funds in a wallet instead of on …","Withdraw","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Creates the account and populates it with rent.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Vector of tuples of (order_sequence_number, DataIndex)","","","","","","","Optional hint for what index the trader’s ClaimedSeat is …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Generic get dynamic account from the data bytes of the …","Generic get owned dynamic account from the data bytes of …","Generic get mutable dynamic account from the data bytes of …","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","New and as_u64 for creating and switching to u64 when …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Add global order to the global account and specific market.","Add GlobalTrader to the tree of global traders","","","","","","ClaimSeat on a market","","","","Deposit to global account.","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","Remove global order. Update the GlobalTraderMarketInfo.","","","","","","","","Full global reference type.","Full global reference type.","","","","","","","Fully owned Global, used in clients that can copy.","","","","","","","","","","","","","","","","","","","","","","","","Discriminant for identifying this type of account.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Full market reference type.","Full market reference type.","Fully owned Market, used in clients that can copy.","","","","","","","","","","","","","","","","","Discriminant for identifying this type of account.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Send CPI for creating a new account on chain.","Canonical discriminant of the given struct. It is the hash …","","","","","Accounts needed to make a global trade. Scope is beyond …","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","Required if this is a token22 token.","","","","","","","","Validation for manifest accounts.","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,13,10,11,12,13,8,9,10,11,12,13,14,15,16,17,18,8,9,10,11,12,13,14,15,16,17,18,8,9,10,11,12,13,14,15,16,17,18,8,9,10,11,12,13,14,15,16,17,18,8,15,8,9,10,11,12,13,14,15,16,17,18,8,9,10,11,12,13,14,15,16,17,18,24,8,9,10,11,12,13,14,15,16,17,18,0,8,9,10,11,12,13,14,15,16,17,18,15,16,17,18,18,8,9,10,11,12,13,14,15,16,17,18,13,8,9,10,11,12,13,14,15,16,17,18,13,12,8,9,10,11,12,13,14,17,10,11,13,13,14,13,12,13,12,12,12,8,9,10,11,12,13,14,15,16,17,18,9,10,11,13,14,16,17,18,8,9,10,11,12,13,14,15,16,17,18,8,9,10,11,12,13,14,15,16,17,18,8,9,10,11,12,13,14,15,16,17,18,8,9,10,11,12,13,14,15,16,17,18,0,0,0,0,28,28,28,28,28,28,28,28,28,28,0,28,28,28,28,28,28,28,0,28,28,28,28,28,28,28,28,28,28,28,28,28,32,32,32,32,32,32,32,32,32,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,37,38,41,42,37,38,41,42,41,37,38,37,38,37,38,41,42,37,38,41,42,37,38,41,42,37,38,37,38,41,42,37,38,41,42,38,38,37,38,41,37,37,37,38,41,42,37,38,41,42,37,38,41,37,38,41,42,37,38,41,42,38,37,38,41,42,37,38,41,42,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,0,50,50,50,50,50,50,50,50,50,50,50,50,50,50,0,0,0,0,54,54,54,54,54,54,54,54,54,54,54,54,54,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,47,47,56,57,58,0,0,0,0,56,57,58,47,56,57,58,56,57,58,59,56,57,58,56,57,58,47,48,56,57,58,47,48,56,57,58,47,47,57,47,56,57,58,56,57,58,47,56,57,58,47,56,57,58,47,56,57,58,47,56,57,58,47,48,56,57,58,47,48,56,57,58,47,56,56,57,57,58,58,47,56,56,57,57,58,58,47,47,56,56,57,57,58,58,47,47,48,56,57,58,47,48,56,57,58,47,48,56,57,58,47,56,57,58,59,56,57,58,56,57,58,47,56,57,58,47,56,57,58,47,56,57,58,47,56,57,58,47,47,48,47,56,57,58,47,48,56,57,58,47,48,56,57,58,47,48,0,0,0,0,0,0,0,0,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,52,52,52,52,52,52,52,52,52,52,52,69,52,65,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,0,0,0,0,0,0,0,0,0,0,64,74,75,64,74,75,64,74,75,64,74,75,74,75,64,74,75,64,74,75,64,74,75,64,85,86,87,74,75,74,74,75,75,85,86,87,74,75,64,74,75,0,64,64,75,74,64,64,64,74,75,64,74,75,64,74,75,74,75,64,74,75,74,75,64,74,75,64,74,75,64,74,75,64,64,74,75,0,0,0,0,0,0,0,0,0,0,73,72,73,67,72,73,67,67,67,67,72,73,67,72,73,67,67,88,89,90,88,89,90,72,73,67,67,67,67,67,67,67,67,67,67,67,72,67,72,73,67,72,67,72,72,67,72,73,73,72,72,73,67,72,72,73,67,72,73,67,72,73,67,67,72,73,67,45,45,45,0,45,45,0,45,63,45,63,45,63,45,63,63,45,63,45,63,45,63,45,45,63,63,63,45,63,63,45,63,63,63,63,63,63,63,45,63,63,63,45,63,63,0,0,63,63,45,45,63,63,45,45,63,45,45,63,45,63,45,63,0,0,0,0,0,0,0,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,0,0,78,78,78,78,78,78,78,78,78,0,78,78,78,78,78,78,78,78,79,78,0,0,0,0,80,81,82,83,80,81,82,83,80,81,82,83,80,81,82,83,80,81,82,83,81,82,80,81,82,83,80,81,82,83,80,81,82,83,80,81,82,83,80,81,82,83,80,81,82,83,82,80,81,82,83,80,81,82,83,80,81,82,83,80,81,82,83,80,81,82,83,0,0,76,84,76,84,76,84,76,84,76,84,84,76,84,76,84,76,84,0,0,76,84,76,84,76,76,84,84,84,76,84,76,84,76,84,76,84,76,84],"f":"`{bd}{fh}``{{}b}```{{b{l{j}}{l{f}}}n}````````````````````````{ce{}{}}000000000000000000000{A`A`}{AbAb}{AdAd}{AfAf}{AhAh}{AjAj}{AlAl}{AnAn}{B`B`}{BbBb}{BdBd}{{ce}Bf{}{}}0000000000``<<<<<<<<<<<<<<<<<<<<<<{{}{{Bh{f}}}}00000000000{c{{Bl{BfBj}}}{BnC`}}{cc{}}0000000000`````???????????`{cd{}}0000000000`````````````````````{ce{}{}}0000000000````````{c{{Bl{e}}}{}{}}000000000000000000000{cCb{}}000000000022222222222``````````````````````{{dcCd}n{{Cf{Bj}}}}3333{{ChCj}Cl}064{cCn{}}4435````````````55{D`D`};66{{D`D`}d}{{ce}d{}{}}0{{D`Cj}Cl};99{D`{{Db{f}}}}9{f{{Bl{D`{Dd{D`}}}}}}{c{{Bl{D`{Dd{D`}}}}}{}};:<```````````{{bb{Dh{Df}}{Db{Dj}}{Db{Dl}}{Dh{b}}{Dh{b}}{Dh{b}}{Dh{b}}}Dn}{{bb}Dn}{{bbbb}Dn}{{bbbb}{{Bl{{Db{Dn}}Bj}}}}{{bbbhbb}Dn}33{{bbb}Dn}0{{bbbbh}Dn}{{bbbbbbhhddbbd}Dn}3````````````````{Dlh}{ce{}{}}0000000`{DjDj}{DlDl}{{ce}Bf{}{}}033333333{{{l{f}}}{{Bl{DjE`}}}}{{{l{f}}}{{Bl{DlE`}}}}{{{l{f}}}{{Bl{EbE`}}}}{{{l{f}}}{{Bl{EdE`}}}}{{DjCj}Cl}{{DlCj}Cl}{cc{}}000::::{Dld}{DlEf}{hDj}{{hEfEhdEjEf}Dl}{{{Dh{Df}}{Db{Dj}}{Db{Dl}}}Eb}{{h{Dh{Df}}}Dj}{Dj{{Dh{Df}}}}{Djh}{DlEj}``{{Djc}{{Bl{BfE`}}}El}{{Dlc}{{Bl{BfE`}}}El}{{Ebc}{{Bl{BfE`}}}El}{{Edc}{{Bl{BfE`}}}El}{ce{}{}}0`{c{{Bl{e}}}{}{}}0000000{Dl{{Bl{EnF`}}}}{cCb{}}0003333``3333{{{l{f}}}{{Bl{FbE`}}}}{cc{}}5{hFb}{{Fbc}{{Bl{BfE`}}}El}6647``7777{{{l{f}}}{{Bl{FdE`}}}}38{hFd}{{Fdc}{{Bl{BfE`}}}El}997:{{{Ff{{l{f}}}}}{{Fh{c{l{f}}}}}Bn}{{{l{f}}}{{Fh{c{Db{f}}}}}Bn}{{{Fj{{l{f}}}}}{{Fh{c{l{f}}}}}Bn}`===={{{l{f}}}{{Bl{FlE`}}}}9>{{hhdd}Fl}{{Flc}{{Bl{BfE`}}}El}??={ce{}{}}``0000{{{l{f}}}{{Bl{FnE`}}}}=1{hFn}{{Fnc}{{Bl{BfE`}}}El}{c{{Bl{e}}}{}{}}0{cCb{}}5```````````````{{G`G`}G`}{{GbGb}Gb}{{GdGd}Gd}{{G`G`}Bf}{{GbGb}Bf}{{GdGd}Bf}{Gfh}{G`h}{Gbh}{Gdh}??????????{{G`G`}{{Bl{G`Ch}}}}{{GbGb}{{Bl{GbCh}}}}{{GdGd}{{Bl{GdCh}}}}{{EnG`d}{{Bl{GbBj}}}}{{EnGbd}{{Bl{EnBj}}}}{{GbEnd}{{Bl{G`Bj}}}}{{EnGbd}{{Bl{G`Bj}}}}654{G`G`}{GbGb}{GdGd}{EnEn}{{ce}Bf{}{}}000{{G`G`}Gh}{{GbGb}Gh}{{GdGd}Gh}{{EnEn}Gh}{{}G`}{{}Gb}{{}Gd}{{}En}{ce{}{}}000000000{{{l{f}}}{{Bl{G`E`}}}}{{{l{f}}}{{Bl{GbE`}}}}{{{l{f}}}{{Bl{GdE`}}}}{{{l{f}}}{{Bl{EnE`}}}}{{G`h}d}{{G`G`}d}{{Gbh}d}{{GbGb}d}{{Gdh}d}{{GdGd}d}{{EnEn}d}{{ce}d{}{}}0000000{{G`Cj}Cl}0{{GbCj}Cl}0{{GdCj}Cl}0{{EnCj}Cl}0{{F`Cj}Cl}{cc{}}0000{ce{}{}}0000{cd{}}000{{G`G`}G`}{{GbGb}Gb}{{GdGd}Gd}{hGf}{hG`}{hGb}{hGd}{{G`G`}{{Dh{Gh}}}}{{GbGb}{{Dh{Gh}}}}{{GdGd}{{Dh{Gh}}}}{{EnEn}{{Dh{Gh}}}}{{G`c}{{Bl{BfE`}}}El}{{Gbc}{{Bl{BfE`}}}El}{{Gdc}{{Bl{BfE`}}}El}{{Enc}{{Bl{BfE`}}}El}{ce{}{}}000{cCn{}}000{c{{Bl{e}}}{}{}}00{Gj{{Bl{Enc}}}{}}11{{EfEh}{{Bl{EnF`}}}}22222{cCb{}}000055555`````````55{GlGl}{{ce}Bf{}{}}{{GlGl}Gh}{{}Gl}99{{GlGl}d}{{ce}d{}{}}0{{GlCj}Cl}0{cc{}}={cd{}}{bGl}{{GlGl}{{Dh{Gh}}}}`{ce{}{}}{cCn{}}`{c{{Bl{e}}}{}{}}0>2``````````````{{{Fh{ce}}Gnbb}n{{Hb{H`}}}{{Hb{{l{f}}}}}}{{{Fh{ce}}b}n{{Hb{H`}}}{{Hb{{l{f}}}}}}44{{{Fh{ce}}Dfh{Bh{{Dh{Hd}}}}}n{{Hb{Hf}}}{{Hb{{l{f}}}}}}{{{Fh{ce}}DfDf{Bh{{Dh{Hd}}}}}n{{Hb{Hf}}}{{Hb{{l{f}}}}}}{{{Fh{ce}}b}n{{Hb{Hf}}}{{Hb{{l{f}}}}}}{{{Fh{ce}}bb}n{{Hb{H`}}}{{Hb{{l{f}}}}}}{{{Fh{ce}}}{{Fh{ce}}}HhHh}{{ce}Bf{}{}}{{{Fh{ce}}bhd}n{{Hb{Hf}}}{{Hb{{l{f}}}}}}{{{Fh{ce}}bGd}n{{Hb{H`}}}{{Hb{{l{f}}}}}}{HjcHl}={HbcHl}>`{{{Fh{ce}}}n{{Hb{Hf}}}{{Hb{{l{f}}}}}}`{cc{}}{{{Fh{ce}}b}{{Bl{GdBj}}}{{Hj{H`}}}{{Hj{{l{f}}}}}}{{{Fh{ce}}}b{{Hj{Hf}}}{{Hj{{l{f}}}}}}{{{Fh{ce}}Df}Gn{{Hj{Hf}}}{{Hj{{l{f}}}}}}1{{{Fh{ce}}b}{{Hn{GbG`}}}{{Hj{Hf}}}{{Hj{{l{f}}}}}}{{{Fh{ce}}b}Df{{Hb{Hf}}}{{Hb{{l{f}}}}}}{{{Fh{ce}}Df}b{{Hj{Hf}}}{{Hj{{l{f}}}}}}{{{Fh{ce}}}n{{Hb{H`}}}{{Hb{{l{f}}}}}}{{{Fh{ce}}ddG`}{{Bl{GbBj}}}{{Hj{Hf}}}{{Hj{{l{f}}}}}}{{{Fh{ce}}dGb}{{Bl{G`Bj}}}{{Hj{Hf}}}{{Hj{{l{f}}}}}}{ce{}{}};{{{Fh{ce}}I`}{{Bl{IbBj}}}{{Hb{Hf}}}{{Hb{{l{f}}}}}}?{{{Fh{ce}}b}n{{Hb{Hf}}}{{Hb{{l{f}}}}}}{{{Fh{ce}}bbGd}n{{Hb{H`}}}{{Hb{{l{f}}}}}}3{c{{Bl{e}}}{}{}}0{cCb{}}5{{{Fh{ce}}bhd}n{{Hb{Hf}}}{{Hb{{l{f}}}}}}``````````666666{H`H`}{IdId}{IfIf}{{ce}Bf{}{}}00{{IdId}Gh}{{IfIf}Gh}{{}H`}{{}Id}{{}If}??????````{{IdId}d}{{IfIf}d}{{ce}d{}{}}000```{{IdCj}Cl}{{IfCj}Cl}{cc{}}00{{H`{l{f}}bb}{{Bl{IfBj}}}}{H`Df}{H`b}{IfGd}{Idb}2{H`f}{ce{}{}}00{cd{}}00{bH`}{bId}{bIf}{{IdId}{{Dh{Gh}}}}{{IfIf}{{Dh{Gh}}}}666{cCn{}}0{c{{Bl{e}}}{}{}}00000{cCb{}}00{H`n}:::```````````::::::{HfHf}{{ce}Bf{}{}}{{}Hf}======```````{cc{}}00{HfDf}{Hfb}{Hff}1021010`{Hfd}{ce{}{}}00`{cd{}}``{{IhIhb}Hf}``````2`======<<<{Hfn}333```````3333{EjEj}{GnGn}<<{{GnGn}Gh}{{}Ej}{{}Gn}8888{{{l{f}}}{{Bl{EjE`}}}}{{EjEj}d}{{GnGn}d}{{ce}d{}{}}0{{EjCj}Cl}{{GnCj}Cl}0{cc{}}0{Gnd}{GnGb}{GnEj}{GnEn}{Gnh}{GnDf}{ce{}{}}0{{GnEf}d}7{cd{}}0{{DfGbEnhEfdEj}{{Bl{GnBj}}}}{Ejd}0{{GnGn}{{Dh{Gh}}}}{{GnGb}n}{{Ejc}{{Bl{BfE`}}}El}77{cCn{}}{f{{Bl{Ej{Dd{Ej}}}}}}{c{{Bl{e}}}{}{}}0{c{{Bl{Ej{Dd{Ej}}}}}{}}11{cCb{}}0<<{{jjjbIjh{Db{{Db{f}}}}}n}{{}{{Bl{hBj}}}}`````>>>>{cc{}}``?`````553?``??{{{Il{c}}}{{Il{c}}}{HhInBnHh}}{{ce}Bf{}{}}{{{Il{c}}}e{InBnHh}{}}{ce{}{}}04{{{Il{c}}}{{Bl{{Ff{c}}Bj}}}{InBnHh}}{b{{Hn{bf}}}}`2{j{{Bl{{Il{c}}Bj}}}{InBnHh}}03<<:{Inn}4````{J`j}{Jbj}{Jdj}{Jfj}88888888{J`J`}{JbJb}{JdJd}{JfJf}>>>>{Jbc{}}{Jdc{}}>>>>>>>>{cc{}}000````????{{jb}{{Bl{J`Bj}}}}{j{{Bl{JbBj}}}}{j{{Bl{JdBj}}}}{j{{Bl{JfBj}}}}1{ce{}{}}000{c{{Bl{e}}}{}{}}0000000{cCb{}}0002222``{Ihj}{Jhj}4444{IhIh}{JhJh}{{ce}Bf{}{}}0{Jhc{}}8888=={b{{Hn{bf}}}}{{bb}{{Hn{bf}}}}``::`{j{{Bl{IhBj}}}}{{jb}{{Bl{JhBj}}}}{{jbb}{{Bl{JhBj}}}}{{jbbb}{{Bl{JhBj}}}}>>====<<>>","c":[],"p":[[5,"Pubkey",1111],[1,"bool"],[1,"u8"],[1,"u64"],[5,"AccountInfo",1112],[1,"slice"],[8,"ProgramResult",1113],[5,"CreateMarketLog",16],[5,"ClaimSeatLog",16],[5,"DepositLog",16],[5,"WithdrawLog",16],[5,"FillLog",16],[5,"PlaceOrderLog",16],[5,"CancelOrderLog",16],[5,"GlobalCreateLog",16],[5,"GlobalAddTraderLog",16],[5,"GlobalClaimSeatLog",16],[5,"GlobalDepositLog",16],[1,"unit"],[1,"array"],[6,"ProgramError",1114],[6,"Result",1115],[10,"Pod",1116],[10,"Discriminant",16],[5,"TypeId",1117],[1,"str"],[10,"Into",1118],[6,"ManifestError",242],[5,"Formatter",1119],[8,"Result",1119],[5,"String",1120],[6,"ManifestInstruction",274],[5,"Vec",1121],[5,"TryFromPrimitiveError",1122],[8,"DataIndex",1123],[6,"Option",1124],[5,"CancelOrderParams",341],[5,"PlaceOrderParams",341],[5,"Instruction",1125],[5,"Error",1126],[5,"BatchUpdateParams",341],[5,"BatchUpdateReturn",341],[1,"u32"],[1,"i8"],[6,"OrderType",891],[10,"Write",1127],[5,"QuoteAtomsPerBaseAtom",478],[5,"PriceConversionError",478],[5,"DepositParams",416],[5,"GlobalDepositParams",431],[5,"Ref",1128],[5,"DynamicAccount",682],[5,"RefMut",1128],[5,"SwapParams",449],[5,"WithdrawParams",463],[5,"QuoteAtoms",478],[5,"BaseAtoms",478],[5,"GlobalAtoms",478],[10,"WrapperU64",478],[6,"Ordering",1129],[1,"f64"],[5,"ClaimedSeat",643],[5,"RestingOrder",891],[5,"GlobalFixed",727],[10,"DerefOrBorrowMut",682],[5,"GlobalTradeAccounts",960],[5,"MarketFixed",814],[10,"Clone",1130],[10,"DerefOrBorrow",682],[10,"Sized",1131],[1,"tuple"],[5,"AddOrderToMarketArgs",814],[5,"AddOrderToMarketResult",814],[5,"GlobalTrader",727],[5,"GlobalTraderMarketInfo",727],[5,"MintAccountInfo",1071],[5,"Rent",1132],[5,"ManifestAccountInfo",978],[10,"ManifestAccount",978],[5,"Program",1000],[5,"TokenProgram",1000],[5,"Signer",1000],[5,"EmptyAccount",1000],[5,"TokenAccountInfo",1071],[8,"GlobalValue",727],[8,"GlobalRef",727],[8,"GlobalRefMut",727],[8,"MarketValue",814],[8,"MarketRef",814],[8,"MarketRefMut",814]],"b":[[265,"impl-Debug-for-ManifestError"],[266,"impl-Display-for-ManifestError"],[553,"impl-PartialEq%3Cu64%3E-for-QuoteAtoms"],[554,"impl-PartialEq-for-QuoteAtoms"],[555,"impl-PartialEq%3Cu64%3E-for-BaseAtoms"],[556,"impl-PartialEq-for-BaseAtoms"],[557,"impl-PartialEq%3Cu64%3E-for-GlobalAtoms"],[558,"impl-PartialEq-for-GlobalAtoms"],[568,"impl-Debug-for-QuoteAtoms"],[569,"impl-Display-for-QuoteAtoms"],[570,"impl-Display-for-BaseAtoms"],[571,"impl-Debug-for-BaseAtoms"],[572,"impl-Display-for-GlobalAtoms"],[573,"impl-Debug-for-GlobalAtoms"],[574,"impl-Display-for-QuoteAtomsPerBaseAtom"],[575,"impl-Debug-for-QuoteAtomsPerBaseAtom"],[656,"impl-Display-for-ClaimedSeat"],[657,"impl-Debug-for-ClaimedSeat"],[919,"impl-Display-for-RestingOrder"],[920,"impl-Debug-for-RestingOrder"]]}],\
["manifest_jupiter",{"doc":"","t":"FNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["ManifestMarket","borrow","borrow_mut","clone","clone_amm","clone_into","deref_or_borrow","deref_or_borrow_mut","from","from_keyed_account","get_accounts_len","get_accounts_to_update","get_base_mint","get_quote_mint","get_reserve_mints","get_swap_and_account_metas","get_user_setup","has_dynamic_accounts","into","key","label","program_dependencies","program_id","quote","to_owned","try_from","try_into","type_id","unidirectional","update","vzip"],"q":[[0,"manifest_jupiter"],[31,"jupiter_amm_interface"],[32,"alloc::boxed"],[33,"jupiter_amm_interface"],[34,"solana_program::pubkey"],[35,"alloc::vec"],[36,"jupiter_amm_interface"],[37,"alloc::string"],[38,"jupiter_amm_interface"],[39,"core::any"],[40,"jupiter_amm_interface"]],"d":["","","","","","","","","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":"`{ce{}{}}0{bb}{b{{f{d}}}}{{ce}h{}{}}33{cc{}}{j{{l{b}}}}{bn}{b{{Ab{A`}}}}{bA`}01{{bAd}{{l{Af}}}}{b{{Aj{Ah}}}}{bAl};3{bAn}{b{{Ab{{B`{A`An}}}}}}5{{bBb}{{l{Bd}}}}>{c{{Bf{e}}}{}{}}0{cBh{}}5{{bBj}{{l{h}}}}{ce{}{}}","c":[],"p":[[5,"ManifestMarket",0],[10,"Amm",31],[5,"Box",32],[1,"unit"],[5,"KeyedAccount",31],[8,"Result",33],[1,"usize"],[5,"Pubkey",34],[5,"Vec",35],[5,"SwapParams",31],[5,"SwapAndAccountMetas",31],[6,"AmmUserSetup",31],[6,"Option",36],[1,"bool"],[5,"String",37],[1,"tuple"],[5,"QuoteParams",31],[5,"Quote",31],[6,"Result",38],[5,"TypeId",39],[8,"AccountMap",31]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
