searchState.loadedDescShard("manifest", 0, "Manifest is a limit order book exchange on the Solana …\nThe const program ID.\nReturns <code>true</code> if given pubkey is the program ID.\nSafety\nReturns the program ID.\nStatic string containing the security.txt file.\nSerialize and log an event\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBatch update with multiple place orders and cancels.\nAllocate a seat\nCreate a market\nDeposit\nExpand a market.\nAdd a trader to the global account.\nRemoves an order from a market that cannot be filled. …\nCreate global account for a given token.\nDeposit into global account for a given token.\nEvict another trader from the global account.\nWithdraw from global account for a given token.\nInstructions available for the Manifest program\nPlaces an order using funds in a wallet instead of on …\nPlaces an order using funds in a wallet instead of on …\nWithdraw\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates the account and populates it with rent.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nVector of tuples of (order_sequence_number, DataIndex)\nOptional hint for what index the trader’s ClaimedSeat is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGeneric get dynamic account from the data bytes of the …\nGeneric get owned dynamic account from the data bytes of …\nGeneric get mutable dynamic account from the data bytes of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNew and as_u64 for creating and switching to u64 when …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nQuote volume traded over lifetime, can overflow. Double …\nAdd global order to the global account and specific market.\nAdd GlobalTrader to the tree of global traders\nDeposit to global account.\nEvict from the global account and steal their seat\nReturns the argument unchanged.\nHow many base atoms you get when you trade in …\nCalls <code>U::from(self)</code>.\nPlace an order and update the market\nWithdraw from global account.\nFull global reference type.\nFull global reference type.\nFully owned Global, used in clients that can copy.\nDiscriminant for identifying this type of account.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFull market reference type.\nFull market reference type.\nFully owned Market, used in clients that can copy.\nDiscriminant for identifying this type of account.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRead a <code>RBNode&lt;ClaimedSeat&gt;</code> in an array of data at a given …\nRead a <code>RBNode&lt;ClaimedSeat&gt;</code> in an array of data at a given …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSend CPI for creating a new account on chain.\nCanonical discriminant of the given struct. It is the hash …\nAccounts needed to make a global trade. Scope is beyond …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRequired if this is a token22 token.\nValidation for manifest accounts.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")