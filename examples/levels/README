# Levels - The Orderbook Bonding Curve

## Overview

Levels implements a bonding curve through limit orders on Manifest, an On-Chain Central Limit Order Book (CLOB). Levels are a stepwise approximation of a bonding curve by maintaining a series of strategically placed orders that automatically adjust and replaces liquidity as tokens are bought and sold. 

Levels is an example of what is capable to compose on top of a cheap, efficient on-chain orderbook. The parameters provided set 100 levels for a token to achieve a $1B FDV.

## Comparison
Bonding curves designed as constant product markets have dominated token launch platforms, but they come with significant drawbacks:

- High fixed fees
- Inability to crowdsource liquidity via limit orders
- Inflexible continuous pricing models
- Limited control over risk expression
- Vulnerability to large price impacts

<img src="../examples/levels/assets/curve-comparison.svg" alt="Levels vs Bonding Curve" width="600"/>

### Key Features
Levels are a distinct and fully customizable approach to generating a bonding curve for new token launches.

- Approximates bonding curve mechanics with limit orders
- Automatically adjusts bid/ask levels based on market activity
- Configurable price increments and quantity reductions
- Gas-efficient through batched order updates
- Maintains consistent market depth and liquidity

## How It Works

1. **Bonding Curve Approximation**
   - Creates discrete price levels that approximate a continuous bonding curve
   - Each level has a defined price and quantity
   - Price increases and quantity decreases follow configurable parameters

2. **Order Management**
   - Maintains bid and ask orders across multiple price levels
   - Ask orders use level number as ID (e.g., level 1 = ID 1)
   - Bid orders use level number + 100 as ID (e.g., level 1 = ID 101)
   - Automatically replaces orders as levels change

3. **Level Transitions**
   - When moving up levels (tokens being bought):
     - Replaces intermediate asks with bids
     - Preserves lowest active bid and highest ask
   - When moving down levels (tokens being sold):
     - Replaces intermediate bids with asks
     - Preserves highest active ask and lowest bid

## Configuration

Key parameters in `constants.ts`:
```typescript
INITIAL_FDV          // Initial fully diluted valuation
INITIAL_QTY_RATIO    // Starting quantity as ratio of total supply
INITIAL_QTY_REDUCTION // Initial reduction in quantity per level
QTY_DECR_REDUCTION   // How much to reduce the quantity decrease
INITIAL_PRICE_INCR   // Initial price increase per level
PRICE_INCR_REDUCITION // How much to reduce the price increase
TOKEN_SUPPLY         // Total token supply
NUM_ORDERS           // Number of price levels
INTERVAL_SECS        // Update interval in seconds
MAX_NUM_CANCEL_IX    // Maximum cancel instructions per transaction
MAX_NUM_ORDER_IX     // Maximum order instructions per transaction
```

## Setup

1. **Environment Variables**
   Create a `.env` file with:
   ```
   PRIVATE_KEY=<your-private-key>
   RPC_URL=<solana-rpc-url>
   MFX_MKT=<manifest-market-address>
   ```

2. **Dependencies**
   ```bash
   yarn install @cks-systems/manifest-sdk @solana/web3.js dotenv bs58
   ```

3. **Running**
   ```bash
   yarn levels
   ```

## Monitoring Output

The script provides detailed logging:
- Current market level and price
- Total tokens sold
- Order book balances
- Level transitions
- Transaction signatures

## Best Practices

1. **Initial Setup**
   - Configure appropriate price increments based on expected market size
   - Set reasonable quantity reductions to maintain market depth
   - Choose update interval based on expected token volatility

2. **Monitoring**
   - Watch for failed transactions and adjust batch sizes if needed
   - Monitor price levels to ensure appropriate market depth
   - Track order fill rates to optimize level spacing

3. **Risk Management**
   - Set appropriate initial FDV
   - Monitor total exposure across levels
   - Consider implementing circuit breakers for extreme market conditions

## Technical Details

- Built on Manifest Protocol's CLOB
- Uses Solana for high-performance order execution
- Implements efficient batching for order updates
- Maintains consistent order IDs for tracking

## Requirements

- Node.js 14+
- Solana wallet with SOL for transactions
- Sufficient token balance deposited on Manifest for initial orders

## Security Considerations

- Secure private key management
- Rate limiting for RPC requests
- Error handling for failed transactions
- Protection against partial fill scenarios

## Future Improvements

- Build a wrapper program to simplify execution 
- More sophisticated price curve algorithms
- Replace liquidity from partial fills
- Additional order replacement strategies
- Enhanced monitoring and alerting


## Contributing

Contributions are welcome! Please submit issues and pull requests with improvements.