/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token';
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';

/**
 * @category Instructions
 * @category CreateMarket
 * @category generated
 */
export const CreateMarketStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number;
}>([['instructionDiscriminator', beet.u8]], 'CreateMarketInstructionArgs');
/**
 * Accounts required by the _CreateMarket_ instruction
 *
 * @property [_writable_, **signer**] payer
 * @property [_writable_] market
 * @property [] baseMint
 * @property [] quoteMint
 * @property [_writable_] baseVault
 * @property [_writable_] quoteVault
 * @property [] tokenProgram22
 * @category Instructions
 * @category CreateMarket
 * @category generated
 */
export type CreateMarketInstructionAccounts = {
  payer: web3.PublicKey;
  market: web3.PublicKey;
  systemProgram?: web3.PublicKey;
  baseMint: web3.PublicKey;
  quoteMint: web3.PublicKey;
  baseVault: web3.PublicKey;
  quoteVault: web3.PublicKey;
  tokenProgram?: web3.PublicKey;
  tokenProgram22: web3.PublicKey;
};

export const createMarketInstructionDiscriminator = 0;

/**
 * Creates a _CreateMarket_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category CreateMarket
 * @category generated
 */
export function createCreateMarketInstruction(
  accounts: CreateMarketInstructionAccounts,
  programId = new web3.PublicKey('MNFSTqtC93rEfYHB6hF82sKdZpUDFWkViLByLd1k1Ms'),
) {
  const [data] = CreateMarketStruct.serialize({
    instructionDiscriminator: createMarketInstructionDiscriminator,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.market,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.baseMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.quoteMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.baseVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.quoteVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram22,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
