/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import {
  BatchUpdateParams,
  batchUpdateParamsBeet,
} from '../types/BatchUpdateParams';

/**
 * @category Instructions
 * @category BatchUpdate
 * @category generated
 */
export type BatchUpdateInstructionArgs = {
  params: BatchUpdateParams;
};
/**
 * @category Instructions
 * @category BatchUpdate
 * @category generated
 */
export const BatchUpdateStruct = new beet.FixableBeetArgsStruct<
  BatchUpdateInstructionArgs & {
    instructionDiscriminator: number;
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['params', batchUpdateParamsBeet],
  ],
  'BatchUpdateInstructionArgs',
);
/**
 * Accounts required by the _BatchUpdate_ instruction
 *
 * @property [_writable_, **signer**] payer
 * @property [_writable_] market
 * @property [] baseMint
 * @property [_writable_] baseGlobal
 * @property [] baseGlobalVault
 * @property [] baseMarketVault
 * @property [] baseTokenProgram
 * @property [] quoteMint
 * @property [_writable_] quoteGlobal
 * @property [] quoteGlobalVault
 * @property [] quoteMarketVault
 * @property [] quoteTokenProgram
 * @category Instructions
 * @category BatchUpdate
 * @category generated
 */
export type BatchUpdateInstructionAccounts = {
  payer: web3.PublicKey;
  market: web3.PublicKey;
  systemProgram?: web3.PublicKey;
  baseMint: web3.PublicKey;
  baseGlobal: web3.PublicKey;
  baseGlobalVault: web3.PublicKey;
  baseMarketVault: web3.PublicKey;
  baseTokenProgram: web3.PublicKey;
  quoteMint: web3.PublicKey;
  quoteGlobal: web3.PublicKey;
  quoteGlobalVault: web3.PublicKey;
  quoteMarketVault: web3.PublicKey;
  quoteTokenProgram: web3.PublicKey;
};

export const batchUpdateInstructionDiscriminator = 6;

/**
 * Creates a _BatchUpdate_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category BatchUpdate
 * @category generated
 */
export function createBatchUpdateInstruction(
  accounts: BatchUpdateInstructionAccounts,
  args: BatchUpdateInstructionArgs,
  programId = new web3.PublicKey('MNFSTqtC93rEfYHB6hF82sKdZpUDFWkViLByLd1k1Ms'),
) {
  const [data] = BatchUpdateStruct.serialize({
    instructionDiscriminator: batchUpdateInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.market,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.baseMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.baseGlobal,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.baseGlobalVault,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.baseMarketVault,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.baseTokenProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.quoteMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.quoteGlobal,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.quoteGlobalVault,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.quoteMarketVault,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.quoteTokenProgram,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
