/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { SwapParams, swapParamsBeet } from '../types/SwapParams';

/**
 * @category Instructions
 * @category Swap
 * @category generated
 */
export type SwapInstructionArgs = {
  params: SwapParams;
};
/**
 * @category Instructions
 * @category Swap
 * @category generated
 */
export const SwapStruct = new beet.BeetArgsStruct<
  SwapInstructionArgs & {
    instructionDiscriminator: number;
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['params', swapParamsBeet],
  ],
  'SwapInstructionArgs',
);
/**
 * Accounts required by the _Swap_ instruction
 *
 * @property [_writable_, **signer**] payer
 * @property [_writable_] market
 * @property [_writable_] traderBase
 * @property [_writable_] traderQuote
 * @property [_writable_] baseVault
 * @property [_writable_] quoteVault
 * @property [] tokenProgramBase
 * @property [] baseMint (optional)
 * @property [] tokenProgramQuote (optional)
 * @property [] quoteMint (optional)
 * @property [_writable_] global (optional)
 * @property [_writable_] globalVault (optional)
 * @category Instructions
 * @category Swap
 * @category generated
 */
export type SwapInstructionAccounts = {
  payer: web3.PublicKey;
  market: web3.PublicKey;
  traderBase: web3.PublicKey;
  traderQuote: web3.PublicKey;
  baseVault: web3.PublicKey;
  quoteVault: web3.PublicKey;
  tokenProgramBase: web3.PublicKey;
  baseMint?: web3.PublicKey;
  tokenProgramQuote?: web3.PublicKey;
  quoteMint?: web3.PublicKey;
  global?: web3.PublicKey;
  globalVault?: web3.PublicKey;
};

export const swapInstructionDiscriminator = 4;

/**
 * Creates a _Swap_ instruction.
 *
 * Optional accounts that are not provided will be omitted from the accounts
 * array passed with the instruction.
 * An optional account that is set cannot follow an optional account that is unset.
 * Otherwise an Error is raised.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Swap
 * @category generated
 */
export function createSwapInstruction(
  accounts: SwapInstructionAccounts,
  args: SwapInstructionArgs,
  programId = new web3.PublicKey('MNFSTqtC93rEfYHB6hF82sKdZpUDFWkViLByLd1k1Ms'),
) {
  const [data] = SwapStruct.serialize({
    instructionDiscriminator: swapInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.market,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.traderBase,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.traderQuote,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.baseVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.quoteVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgramBase,
      isWritable: false,
      isSigner: false,
    },
  ];

  if (accounts.baseMint != null) {
    keys.push({
      pubkey: accounts.baseMint,
      isWritable: false,
      isSigner: false,
    });
  }
  if (accounts.tokenProgramQuote != null) {
    if (accounts.baseMint == null) {
      throw new Error(
        "When providing 'tokenProgramQuote' then 'accounts.baseMint' need(s) to be provided as well.",
      );
    }
    keys.push({
      pubkey: accounts.tokenProgramQuote,
      isWritable: false,
      isSigner: false,
    });
  }
  if (accounts.quoteMint != null) {
    if (accounts.baseMint == null || accounts.tokenProgramQuote == null) {
      throw new Error(
        "When providing 'quoteMint' then 'accounts.baseMint', 'accounts.tokenProgramQuote' need(s) to be provided as well.",
      );
    }
    keys.push({
      pubkey: accounts.quoteMint,
      isWritable: false,
      isSigner: false,
    });
  }
  if (accounts.global != null) {
    if (
      accounts.baseMint == null ||
      accounts.tokenProgramQuote == null ||
      accounts.quoteMint == null
    ) {
      throw new Error(
        "When providing 'global' then 'accounts.baseMint', 'accounts.tokenProgramQuote', 'accounts.quoteMint' need(s) to be provided as well.",
      );
    }
    keys.push({
      pubkey: accounts.global,
      isWritable: true,
      isSigner: false,
    });
  }
  if (accounts.globalVault != null) {
    if (
      accounts.baseMint == null ||
      accounts.tokenProgramQuote == null ||
      accounts.quoteMint == null ||
      accounts.global == null
    ) {
      throw new Error(
        "When providing 'globalVault' then 'accounts.baseMint', 'accounts.tokenProgramQuote', 'accounts.quoteMint', 'accounts.global' need(s) to be provided as well.",
      );
    }
    keys.push({
      pubkey: accounts.globalVault,
      isWritable: true,
      isSigner: false,
    });
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
