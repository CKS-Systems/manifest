/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js';
import * as beetSolana from '@metaplex-foundation/beet-solana';
import * as beet from '@metaplex-foundation/beet';
import { GlobalAtoms, globalAtomsBeet } from './GlobalAtoms';

/**
 * Arguments used to create {@link GlobalWithdrawLog}
 * @category Accounts
 * @category generated
 */
export type GlobalWithdrawLogArgs = {
  global: web3.PublicKey;
  trader: web3.PublicKey;
  globalAtoms: GlobalAtoms;
};
/**
 * Holds the data for the {@link GlobalWithdrawLog} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class GlobalWithdrawLog implements GlobalWithdrawLogArgs {
  private constructor(
    readonly global: web3.PublicKey,
    readonly trader: web3.PublicKey,
    readonly globalAtoms: GlobalAtoms,
  ) {}

  /**
   * Creates a {@link GlobalWithdrawLog} instance from the provided args.
   */
  static fromArgs(args: GlobalWithdrawLogArgs) {
    return new GlobalWithdrawLog(args.global, args.trader, args.globalAtoms);
  }

  /**
   * Deserializes the {@link GlobalWithdrawLog} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0,
  ): [GlobalWithdrawLog, number] {
    return GlobalWithdrawLog.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link GlobalWithdrawLog} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,
  ): Promise<GlobalWithdrawLog> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig,
    );
    if (accountInfo == null) {
      throw new Error(`Unable to find GlobalWithdrawLog account at ${address}`);
    }
    return GlobalWithdrawLog.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'MNFSTqtC93rEfYHB6hF82sKdZpUDFWkViLByLd1k1Ms',
    ),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, globalWithdrawLogBeet);
  }

  /**
   * Deserializes the {@link GlobalWithdrawLog} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [GlobalWithdrawLog, number] {
    return globalWithdrawLogBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link GlobalWithdrawLog} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return globalWithdrawLogBeet.serialize(this);
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link GlobalWithdrawLog}
   */
  static get byteSize() {
    return globalWithdrawLogBeet.byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link GlobalWithdrawLog} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      GlobalWithdrawLog.byteSize,
      commitment,
    );
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link GlobalWithdrawLog} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === GlobalWithdrawLog.byteSize;
  }

  /**
   * Returns a readable version of {@link GlobalWithdrawLog} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      global: this.global.toBase58(),
      trader: this.trader.toBase58(),
      globalAtoms: this.globalAtoms,
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const globalWithdrawLogBeet = new beet.BeetStruct<
  GlobalWithdrawLog,
  GlobalWithdrawLogArgs
>(
  [
    ['global', beetSolana.publicKey],
    ['trader', beetSolana.publicKey],
    ['globalAtoms', globalAtomsBeet],
  ],
  GlobalWithdrawLog.fromArgs,
  'GlobalWithdrawLog',
);
