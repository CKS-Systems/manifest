/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js';
import * as beetSolana from '@metaplex-foundation/beet-solana';
import * as beet from '@metaplex-foundation/beet';
import { GlobalAtoms, globalAtomsBeet } from './GlobalAtoms';

/**
 * Arguments used to create {@link GlobalEvictLog}
 * @category Accounts
 * @category generated
 */
export type GlobalEvictLogArgs = {
  evictor: web3.PublicKey;
  evictee: web3.PublicKey;
  evictorAtoms: GlobalAtoms;
  evicteeAtoms: GlobalAtoms;
};
/**
 * Holds the data for the {@link GlobalEvictLog} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class GlobalEvictLog implements GlobalEvictLogArgs {
  private constructor(
    readonly evictor: web3.PublicKey,
    readonly evictee: web3.PublicKey,
    readonly evictorAtoms: GlobalAtoms,
    readonly evicteeAtoms: GlobalAtoms,
  ) {}

  /**
   * Creates a {@link GlobalEvictLog} instance from the provided args.
   */
  static fromArgs(args: GlobalEvictLogArgs) {
    return new GlobalEvictLog(
      args.evictor,
      args.evictee,
      args.evictorAtoms,
      args.evicteeAtoms,
    );
  }

  /**
   * Deserializes the {@link GlobalEvictLog} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0,
  ): [GlobalEvictLog, number] {
    return GlobalEvictLog.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link GlobalEvictLog} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,
  ): Promise<GlobalEvictLog> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig,
    );
    if (accountInfo == null) {
      throw new Error(`Unable to find GlobalEvictLog account at ${address}`);
    }
    return GlobalEvictLog.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'MNFSTqtC93rEfYHB6hF82sKdZpUDFWkViLByLd1k1Ms',
    ),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, globalEvictLogBeet);
  }

  /**
   * Deserializes the {@link GlobalEvictLog} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [GlobalEvictLog, number] {
    return globalEvictLogBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link GlobalEvictLog} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return globalEvictLogBeet.serialize(this);
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link GlobalEvictLog}
   */
  static get byteSize() {
    return globalEvictLogBeet.byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link GlobalEvictLog} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      GlobalEvictLog.byteSize,
      commitment,
    );
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link GlobalEvictLog} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === GlobalEvictLog.byteSize;
  }

  /**
   * Returns a readable version of {@link GlobalEvictLog} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      evictor: this.evictor.toBase58(),
      evictee: this.evictee.toBase58(),
      evictorAtoms: this.evictorAtoms,
      evicteeAtoms: this.evicteeAtoms,
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const globalEvictLogBeet = new beet.BeetStruct<
  GlobalEvictLog,
  GlobalEvictLogArgs
>(
  [
    ['evictor', beetSolana.publicKey],
    ['evictee', beetSolana.publicKey],
    ['evictorAtoms', globalAtomsBeet],
    ['evicteeAtoms', globalAtomsBeet],
  ],
  GlobalEvictLog.fromArgs,
  'GlobalEvictLog',
);
