/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js';
import * as beet from '@metaplex-foundation/beet';
import * as beetSolana from '@metaplex-foundation/beet-solana';
import {
  QuoteAtomsPerBaseAtom,
  quoteAtomsPerBaseAtomBeet,
} from './QuoteAtomsPerBaseAtom';
import { BaseAtoms, baseAtomsBeet } from './BaseAtoms';
import { OrderType, orderTypeBeet } from '../types/OrderType';

/**
 * Arguments used to create {@link PlaceOrderLog}
 * @category Accounts
 * @category generated
 */
export type PlaceOrderLogArgs = {
  market: web3.PublicKey;
  trader: web3.PublicKey;
  price: QuoteAtomsPerBaseAtom;
  baseAtoms: BaseAtoms;
  orderSequenceNumber: beet.bignum;
  orderIndex: number;
  lastValidSlot: number;
  orderType: OrderType;
  isBid: boolean;
  padding: number[] /* size: 6 */;
};
/**
 * Holds the data for the {@link PlaceOrderLog} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class PlaceOrderLog implements PlaceOrderLogArgs {
  private constructor(
    readonly market: web3.PublicKey,
    readonly trader: web3.PublicKey,
    readonly price: QuoteAtomsPerBaseAtom,
    readonly baseAtoms: BaseAtoms,
    readonly orderSequenceNumber: beet.bignum,
    readonly orderIndex: number,
    readonly lastValidSlot: number,
    readonly orderType: OrderType,
    readonly isBid: boolean,
    readonly padding: number[] /* size: 6 */,
  ) {}

  /**
   * Creates a {@link PlaceOrderLog} instance from the provided args.
   */
  static fromArgs(args: PlaceOrderLogArgs) {
    return new PlaceOrderLog(
      args.market,
      args.trader,
      args.price,
      args.baseAtoms,
      args.orderSequenceNumber,
      args.orderIndex,
      args.lastValidSlot,
      args.orderType,
      args.isBid,
      args.padding,
    );
  }

  /**
   * Deserializes the {@link PlaceOrderLog} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0,
  ): [PlaceOrderLog, number] {
    return PlaceOrderLog.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link PlaceOrderLog} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,
  ): Promise<PlaceOrderLog> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig,
    );
    if (accountInfo == null) {
      throw new Error(`Unable to find PlaceOrderLog account at ${address}`);
    }
    return PlaceOrderLog.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'MNFSTqtC93rEfYHB6hF82sKdZpUDFWkViLByLd1k1Ms',
    ),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, placeOrderLogBeet);
  }

  /**
   * Deserializes the {@link PlaceOrderLog} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [PlaceOrderLog, number] {
    return placeOrderLogBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link PlaceOrderLog} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return placeOrderLogBeet.serialize(this);
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link PlaceOrderLog}
   */
  static get byteSize() {
    return placeOrderLogBeet.byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link PlaceOrderLog} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      PlaceOrderLog.byteSize,
      commitment,
    );
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link PlaceOrderLog} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === PlaceOrderLog.byteSize;
  }

  /**
   * Returns a readable version of {@link PlaceOrderLog} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      market: this.market.toBase58(),
      trader: this.trader.toBase58(),
      price: this.price,
      baseAtoms: this.baseAtoms,
      orderSequenceNumber: (() => {
        const x = <{ toNumber: () => number }>this.orderSequenceNumber;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      orderIndex: this.orderIndex,
      lastValidSlot: this.lastValidSlot,
      orderType: 'OrderType.' + OrderType[this.orderType],
      isBid: this.isBid,
      padding: this.padding,
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const placeOrderLogBeet = new beet.BeetStruct<
  PlaceOrderLog,
  PlaceOrderLogArgs
>(
  [
    ['market', beetSolana.publicKey],
    ['trader', beetSolana.publicKey],
    ['price', quoteAtomsPerBaseAtomBeet],
    ['baseAtoms', baseAtomsBeet],
    ['orderSequenceNumber', beet.u64],
    ['orderIndex', beet.u32],
    ['lastValidSlot', beet.u32],
    ['orderType', orderTypeBeet],
    ['isBid', beet.bool],
    ['padding', beet.uniformFixedSizeArray(beet.u8, 6)],
  ],
  PlaceOrderLog.fromArgs,
  'PlaceOrderLog',
);
