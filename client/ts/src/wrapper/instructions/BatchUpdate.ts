/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import {
  WrapperBatchUpdateParams,
  wrapperBatchUpdateParamsBeet,
} from '../types/WrapperBatchUpdateParams';

/**
 * @category Instructions
 * @category BatchUpdate
 * @category generated
 */
export type BatchUpdateInstructionArgs = {
  params: WrapperBatchUpdateParams;
};
/**
 * @category Instructions
 * @category BatchUpdate
 * @category generated
 */
export const BatchUpdateStruct = new beet.FixableBeetArgsStruct<
  BatchUpdateInstructionArgs & {
    instructionDiscriminator: number;
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['params', wrapperBatchUpdateParamsBeet],
  ],
  'BatchUpdateInstructionArgs',
);
/**
 * Accounts required by the _BatchUpdate_ instruction
 *
 * @property [_writable_] wrapperState
 * @property [] manifestProgram
 * @property [_writable_, **signer**] owner
 * @property [_writable_] market
 * @property [] baseMint (optional)
 * @property [_writable_] baseGlobal (optional)
 * @property [] baseGlobalVault (optional)
 * @property [] baseMarketVault (optional)
 * @property [] baseTokenProgram (optional)
 * @property [] quoteMint (optional)
 * @property [_writable_] quoteGlobal (optional)
 * @property [] quoteGlobalVault (optional)
 * @property [] quoteMarketVault (optional)
 * @property [] quoteTokenProgram (optional)
 * @category Instructions
 * @category BatchUpdate
 * @category generated
 */
export type BatchUpdateInstructionAccounts = {
  wrapperState: web3.PublicKey;
  manifestProgram: web3.PublicKey;
  owner: web3.PublicKey;
  market: web3.PublicKey;
  systemProgram?: web3.PublicKey;
  baseMint?: web3.PublicKey;
  baseGlobal?: web3.PublicKey;
  baseGlobalVault?: web3.PublicKey;
  baseMarketVault?: web3.PublicKey;
  baseTokenProgram?: web3.PublicKey;
  quoteMint?: web3.PublicKey;
  quoteGlobal?: web3.PublicKey;
  quoteGlobalVault?: web3.PublicKey;
  quoteMarketVault?: web3.PublicKey;
  quoteTokenProgram?: web3.PublicKey;
};

export const batchUpdateInstructionDiscriminator = 4;

/**
 * Creates a _BatchUpdate_ instruction.
 *
 * Optional accounts that are not provided will be omitted from the accounts
 * array passed with the instruction.
 * An optional account that is set cannot follow an optional account that is unset.
 * Otherwise an Error is raised.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category BatchUpdate
 * @category generated
 */
export function createBatchUpdateInstruction(
  accounts: BatchUpdateInstructionAccounts,
  args: BatchUpdateInstructionArgs,
  programId = new web3.PublicKey('wMNFSTkir3HgyZTsB7uqu3i7FA73grFCptPXgrZjksL'),
) {
  const [data] = BatchUpdateStruct.serialize({
    instructionDiscriminator: batchUpdateInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.wrapperState,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.manifestProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.owner,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.market,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ];

  if (accounts.baseMint != null) {
    keys.push({
      pubkey: accounts.baseMint,
      isWritable: false,
      isSigner: false,
    });
  }
  if (accounts.baseGlobal != null) {
    if (accounts.baseMint == null) {
      throw new Error(
        "When providing 'baseGlobal' then 'accounts.baseMint' need(s) to be provided as well.",
      );
    }
    keys.push({
      pubkey: accounts.baseGlobal,
      isWritable: true,
      isSigner: false,
    });
  }
  if (accounts.baseGlobalVault != null) {
    if (accounts.baseMint == null || accounts.baseGlobal == null) {
      throw new Error(
        "When providing 'baseGlobalVault' then 'accounts.baseMint', 'accounts.baseGlobal' need(s) to be provided as well.",
      );
    }
    keys.push({
      pubkey: accounts.baseGlobalVault,
      isWritable: false,
      isSigner: false,
    });
  }
  if (accounts.baseMarketVault != null) {
    if (
      accounts.baseMint == null ||
      accounts.baseGlobal == null ||
      accounts.baseGlobalVault == null
    ) {
      throw new Error(
        "When providing 'baseMarketVault' then 'accounts.baseMint', 'accounts.baseGlobal', 'accounts.baseGlobalVault' need(s) to be provided as well.",
      );
    }
    keys.push({
      pubkey: accounts.baseMarketVault,
      isWritable: false,
      isSigner: false,
    });
  }
  if (accounts.baseTokenProgram != null) {
    if (
      accounts.baseMint == null ||
      accounts.baseGlobal == null ||
      accounts.baseGlobalVault == null ||
      accounts.baseMarketVault == null
    ) {
      throw new Error(
        "When providing 'baseTokenProgram' then 'accounts.baseMint', 'accounts.baseGlobal', 'accounts.baseGlobalVault', 'accounts.baseMarketVault' need(s) to be provided as well.",
      );
    }
    keys.push({
      pubkey: accounts.baseTokenProgram,
      isWritable: false,
      isSigner: false,
    });
  }
  if (accounts.quoteMint != null) {
    if (
      accounts.baseMint == null ||
      accounts.baseGlobal == null ||
      accounts.baseGlobalVault == null ||
      accounts.baseMarketVault == null ||
      accounts.baseTokenProgram == null
    ) {
      throw new Error(
        "When providing 'quoteMint' then 'accounts.baseMint', 'accounts.baseGlobal', 'accounts.baseGlobalVault', 'accounts.baseMarketVault', 'accounts.baseTokenProgram' need(s) to be provided as well.",
      );
    }
    keys.push({
      pubkey: accounts.quoteMint,
      isWritable: false,
      isSigner: false,
    });
  }
  if (accounts.quoteGlobal != null) {
    if (
      accounts.baseMint == null ||
      accounts.baseGlobal == null ||
      accounts.baseGlobalVault == null ||
      accounts.baseMarketVault == null ||
      accounts.baseTokenProgram == null ||
      accounts.quoteMint == null
    ) {
      throw new Error(
        "When providing 'quoteGlobal' then 'accounts.baseMint', 'accounts.baseGlobal', 'accounts.baseGlobalVault', 'accounts.baseMarketVault', 'accounts.baseTokenProgram', 'accounts.quoteMint' need(s) to be provided as well.",
      );
    }
    keys.push({
      pubkey: accounts.quoteGlobal,
      isWritable: true,
      isSigner: false,
    });
  }
  if (accounts.quoteGlobalVault != null) {
    if (
      accounts.baseMint == null ||
      accounts.baseGlobal == null ||
      accounts.baseGlobalVault == null ||
      accounts.baseMarketVault == null ||
      accounts.baseTokenProgram == null ||
      accounts.quoteMint == null ||
      accounts.quoteGlobal == null
    ) {
      throw new Error(
        "When providing 'quoteGlobalVault' then 'accounts.baseMint', 'accounts.baseGlobal', 'accounts.baseGlobalVault', 'accounts.baseMarketVault', 'accounts.baseTokenProgram', 'accounts.quoteMint', 'accounts.quoteGlobal' need(s) to be provided as well.",
      );
    }
    keys.push({
      pubkey: accounts.quoteGlobalVault,
      isWritable: false,
      isSigner: false,
    });
  }
  if (accounts.quoteMarketVault != null) {
    if (
      accounts.baseMint == null ||
      accounts.baseGlobal == null ||
      accounts.baseGlobalVault == null ||
      accounts.baseMarketVault == null ||
      accounts.baseTokenProgram == null ||
      accounts.quoteMint == null ||
      accounts.quoteGlobal == null ||
      accounts.quoteGlobalVault == null
    ) {
      throw new Error(
        "When providing 'quoteMarketVault' then 'accounts.baseMint', 'accounts.baseGlobal', 'accounts.baseGlobalVault', 'accounts.baseMarketVault', 'accounts.baseTokenProgram', 'accounts.quoteMint', 'accounts.quoteGlobal', 'accounts.quoteGlobalVault' need(s) to be provided as well.",
      );
    }
    keys.push({
      pubkey: accounts.quoteMarketVault,
      isWritable: false,
      isSigner: false,
    });
  }
  if (accounts.quoteTokenProgram != null) {
    if (
      accounts.baseMint == null ||
      accounts.baseGlobal == null ||
      accounts.baseGlobalVault == null ||
      accounts.baseMarketVault == null ||
      accounts.baseTokenProgram == null ||
      accounts.quoteMint == null ||
      accounts.quoteGlobal == null ||
      accounts.quoteGlobalVault == null ||
      accounts.quoteMarketVault == null
    ) {
      throw new Error(
        "When providing 'quoteTokenProgram' then 'accounts.baseMint', 'accounts.baseGlobal', 'accounts.baseGlobalVault', 'accounts.baseMarketVault', 'accounts.baseTokenProgram', 'accounts.quoteMint', 'accounts.quoteGlobal', 'accounts.quoteGlobalVault', 'accounts.quoteMarketVault' need(s) to be provided as well.",
      );
    }
    keys.push({
      pubkey: accounts.quoteTokenProgram,
      isWritable: false,
      isSigner: false,
    });
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
