/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import {
  WrapperBatchUpdateParams,
  wrapperBatchUpdateParamsBeet,
} from '../types/WrapperBatchUpdateParams';

/**
 * @category Instructions
 * @category BatchUpdateBaseGlobal
 * @category generated
 */
export type BatchUpdateBaseGlobalInstructionArgs = {
  params: WrapperBatchUpdateParams;
};
/**
 * @category Instructions
 * @category BatchUpdateBaseGlobal
 * @category generated
 */
export const BatchUpdateBaseGlobalStruct = new beet.FixableBeetArgsStruct<
  BatchUpdateBaseGlobalInstructionArgs & {
    instructionDiscriminator: number;
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['params', wrapperBatchUpdateParamsBeet],
  ],
  'BatchUpdateBaseGlobalInstructionArgs',
);
/**
 * Accounts required by the _BatchUpdateBaseGlobal_ instruction
 *
 * @property [_writable_] wrapperState
 * @property [] manifestProgram
 * @property [_writable_, **signer**] owner
 * @property [_writable_] market
 * @property [] baseMint
 * @property [_writable_] baseGlobal
 * @property [] baseGlobalVault
 * @property [] baseMarketVault
 * @property [] baseTokenProgram
 * @category Instructions
 * @category BatchUpdateBaseGlobal
 * @category generated
 */
export type BatchUpdateBaseGlobalInstructionAccounts = {
  wrapperState: web3.PublicKey;
  manifestProgram: web3.PublicKey;
  owner: web3.PublicKey;
  market: web3.PublicKey;
  systemProgram?: web3.PublicKey;
  baseMint: web3.PublicKey;
  baseGlobal: web3.PublicKey;
  baseGlobalVault: web3.PublicKey;
  baseMarketVault: web3.PublicKey;
  baseTokenProgram: web3.PublicKey;
};

export const batchUpdateBaseGlobalInstructionDiscriminator = 5;

/**
 * Creates a _BatchUpdateBaseGlobal_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category BatchUpdateBaseGlobal
 * @category generated
 */
export function createBatchUpdateBaseGlobalInstruction(
  accounts: BatchUpdateBaseGlobalInstructionAccounts,
  args: BatchUpdateBaseGlobalInstructionArgs,
  programId = new web3.PublicKey('wMNFSTkir3HgyZTsB7uqu3i7FA73grFCptPXgrZjksL'),
) {
  const [data] = BatchUpdateBaseGlobalStruct.serialize({
    instructionDiscriminator: batchUpdateBaseGlobalInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.wrapperState,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.manifestProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.owner,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.market,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.baseMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.baseGlobal,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.baseGlobalVault,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.baseMarketVault,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.baseTokenProgram,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
