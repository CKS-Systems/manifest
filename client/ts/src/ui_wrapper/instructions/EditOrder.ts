/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token';
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';

/**
 * @category Instructions
 * @category EditOrder
 * @category generated
 */
export const EditOrderStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number;
}>([['instructionDiscriminator', beet.u8]], 'EditOrderInstructionArgs');
/**
 * Accounts required by the _EditOrder_ instruction
 *
 * @property [_writable_] wrapperState
 * @property [**signer**] owner
 * @property [_writable_] traderTokenAccount
 * @property [_writable_] market
 * @property [_writable_] vault
 * @property [_writable_] mint
 * @property [] manifestProgram
 * @property [_writable_, **signer**] payer
 * @property [] baseMint
 * @property [_writable_] baseGlobal
 * @property [_writable_] baseGlobalVault
 * @property [_writable_] baseMarketVault
 * @property [_writable_] baseTokenProgram
 * @property [] quoteMint
 * @property [_writable_] quoteGlobal
 * @property [_writable_] quoteGlobalVault
 * @property [_writable_] quoteMarketVault
 * @property [_writable_] quoteTokenProgram
 * @category Instructions
 * @category EditOrder
 * @category generated
 */
export type EditOrderInstructionAccounts = {
  wrapperState: web3.PublicKey;
  owner: web3.PublicKey;
  traderTokenAccount: web3.PublicKey;
  market: web3.PublicKey;
  vault: web3.PublicKey;
  mint: web3.PublicKey;
  systemProgram?: web3.PublicKey;
  tokenProgram?: web3.PublicKey;
  manifestProgram: web3.PublicKey;
  payer: web3.PublicKey;
  baseMint: web3.PublicKey;
  baseGlobal: web3.PublicKey;
  baseGlobalVault: web3.PublicKey;
  baseMarketVault: web3.PublicKey;
  baseTokenProgram: web3.PublicKey;
  quoteMint: web3.PublicKey;
  quoteGlobal: web3.PublicKey;
  quoteGlobalVault: web3.PublicKey;
  quoteMarketVault: web3.PublicKey;
  quoteTokenProgram: web3.PublicKey;
};

export const editOrderInstructionDiscriminator = 3;

/**
 * Creates a _EditOrder_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category EditOrder
 * @category generated
 */
export function createEditOrderInstruction(
  accounts: EditOrderInstructionAccounts,
  programId = new web3.PublicKey('UMnFStVeG1ecZFc2gc5K3vFy3sMpotq8C91mXBQDGwh'),
) {
  const [data] = EditOrderStruct.serialize({
    instructionDiscriminator: editOrderInstructionDiscriminator,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.wrapperState,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.owner,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.traderTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.market,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.vault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.mint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.manifestProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.baseMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.baseGlobal,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.baseGlobalVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.baseMarketVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.baseTokenProgram,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.quoteMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.quoteGlobal,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.quoteGlobalVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.quoteMarketVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.quoteTokenProgram,
      isWritable: true,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
