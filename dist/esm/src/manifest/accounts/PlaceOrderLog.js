/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as web3 from '@solana/web3.js';
import * as beet from '@metaplex-foundation/beet';
import * as beetSolana from '@metaplex-foundation/beet-solana';
import { quoteAtomsPerBaseAtomBeet, } from './QuoteAtomsPerBaseAtom';
import { baseAtomsBeet } from './BaseAtoms';
import { OrderType, orderTypeBeet } from '../types/OrderType';
/**
 * Holds the data for the {@link PlaceOrderLog} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class PlaceOrderLog {
    market;
    trader;
    price;
    baseAtoms;
    orderSequenceNumber;
    orderIndex;
    lastValidSlot;
    orderType;
    isBid;
    padding;
    constructor(market, trader, price, baseAtoms, orderSequenceNumber, orderIndex, lastValidSlot, orderType, isBid, padding /* size: 6 */) {
        this.market = market;
        this.trader = trader;
        this.price = price;
        this.baseAtoms = baseAtoms;
        this.orderSequenceNumber = orderSequenceNumber;
        this.orderIndex = orderIndex;
        this.lastValidSlot = lastValidSlot;
        this.orderType = orderType;
        this.isBid = isBid;
        this.padding = padding;
    }
    /**
     * Creates a {@link PlaceOrderLog} instance from the provided args.
     */
    static fromArgs(args) {
        return new PlaceOrderLog(args.market, args.trader, args.price, args.baseAtoms, args.orderSequenceNumber, args.orderIndex, args.lastValidSlot, args.orderType, args.isBid, args.padding);
    }
    /**
     * Deserializes the {@link PlaceOrderLog} from the data of the provided {@link web3.AccountInfo}.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static fromAccountInfo(accountInfo, offset = 0) {
        return PlaceOrderLog.deserialize(accountInfo.data, offset);
    }
    /**
     * Retrieves the account info from the provided address and deserializes
     * the {@link PlaceOrderLog} from its data.
     *
     * @throws Error if no account info is found at the address or if deserialization fails
     */
    static async fromAccountAddress(connection, address, commitmentOrConfig) {
        const accountInfo = await connection.getAccountInfo(address, commitmentOrConfig);
        if (accountInfo == null) {
            throw new Error(`Unable to find PlaceOrderLog account at ${address}`);
        }
        return PlaceOrderLog.fromAccountInfo(accountInfo, 0)[0];
    }
    /**
     * Provides a {@link web3.Connection.getProgramAccounts} config builder,
     * to fetch accounts matching filters that can be specified via that builder.
     *
     * @param programId - the program that owns the accounts we are filtering
     */
    static gpaBuilder(programId = new web3.PublicKey('MNFSTqtC93rEfYHB6hF82sKdZpUDFWkViLByLd1k1Ms')) {
        return beetSolana.GpaBuilder.fromStruct(programId, placeOrderLogBeet);
    }
    /**
     * Deserializes the {@link PlaceOrderLog} from the provided data Buffer.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static deserialize(buf, offset = 0) {
        return placeOrderLogBeet.deserialize(buf, offset);
    }
    /**
     * Serializes the {@link PlaceOrderLog} into a Buffer.
     * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
     */
    serialize() {
        return placeOrderLogBeet.serialize(this);
    }
    /**
     * Returns the byteSize of a {@link Buffer} holding the serialized data of
     * {@link PlaceOrderLog}
     */
    static get byteSize() {
        return placeOrderLogBeet.byteSize;
    }
    /**
     * Fetches the minimum balance needed to exempt an account holding
     * {@link PlaceOrderLog} data from rent
     *
     * @param connection used to retrieve the rent exemption information
     */
    static async getMinimumBalanceForRentExemption(connection, commitment) {
        return connection.getMinimumBalanceForRentExemption(PlaceOrderLog.byteSize, commitment);
    }
    /**
     * Determines if the provided {@link Buffer} has the correct byte size to
     * hold {@link PlaceOrderLog} data.
     */
    static hasCorrectByteSize(buf, offset = 0) {
        return buf.byteLength - offset === PlaceOrderLog.byteSize;
    }
    /**
     * Returns a readable version of {@link PlaceOrderLog} properties
     * and can be used to convert to JSON and/or logging
     */
    pretty() {
        return {
            market: this.market.toBase58(),
            trader: this.trader.toBase58(),
            price: this.price,
            baseAtoms: this.baseAtoms,
            orderSequenceNumber: (() => {
                const x = this.orderSequenceNumber;
                if (typeof x.toNumber === 'function') {
                    try {
                        return x.toNumber();
                    }
                    catch (_) {
                        return x;
                    }
                }
                return x;
            })(),
            orderIndex: this.orderIndex,
            lastValidSlot: this.lastValidSlot,
            orderType: 'OrderType.' + OrderType[this.orderType],
            isBid: this.isBid,
            padding: this.padding,
        };
    }
}
/**
 * @category Accounts
 * @category generated
 */
export const placeOrderLogBeet = new beet.BeetStruct([
    ['market', beetSolana.publicKey],
    ['trader', beetSolana.publicKey],
    ['price', quoteAtomsPerBaseAtomBeet],
    ['baseAtoms', baseAtomsBeet],
    ['orderSequenceNumber', beet.u64],
    ['orderIndex', beet.u32],
    ['lastValidSlot', beet.u32],
    ['orderType', orderTypeBeet],
    ['isBid', beet.bool],
    ['padding', beet.uniformFixedSizeArray(beet.u8, 6)],
], PlaceOrderLog.fromArgs, 'PlaceOrderLog');
