/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as splToken from '@solana/spl-token';
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
/**
 * @category Instructions
 * @category GlobalEvict
 * @category generated
 */
export const GlobalEvictStruct = new beet.BeetArgsStruct([['instructionDiscriminator', beet.u8]], 'GlobalEvictInstructionArgs');
export const globalEvictInstructionDiscriminator = 11;
/**
 * Creates a _GlobalEvict_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category GlobalEvict
 * @category generated
 */
export function createGlobalEvictInstruction(accounts, programId = new web3.PublicKey('MNFSTqtC93rEfYHB6hF82sKdZpUDFWkViLByLd1k1Ms')) {
    const [data] = GlobalEvictStruct.serialize({
        instructionDiscriminator: globalEvictInstructionDiscriminator,
    });
    const keys = [
        {
            pubkey: accounts.payer,
            isWritable: true,
            isSigner: true,
        },
        {
            pubkey: accounts.global,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: accounts.mint,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey: accounts.globalVault,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: accounts.traderToken,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey: accounts.evicteeToken,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
            isWritable: false,
            isSigner: false,
        },
    ];
    const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data,
    });
    return ix;
}
