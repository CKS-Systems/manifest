/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { swapParamsBeet } from '../types/SwapParams';
/**
 * @category Instructions
 * @category Swap
 * @category generated
 */
export const SwapStruct = new beet.BeetArgsStruct([
    ['instructionDiscriminator', beet.u8],
    ['params', swapParamsBeet],
], 'SwapInstructionArgs');
export const swapInstructionDiscriminator = 4;
/**
 * Creates a _Swap_ instruction.
 *
 * Optional accounts that are not provided will be omitted from the accounts
 * array passed with the instruction.
 * An optional account that is set cannot follow an optional account that is unset.
 * Otherwise an Error is raised.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Swap
 * @category generated
 */
export function createSwapInstruction(accounts, args, programId = new web3.PublicKey('MNFSTqtC93rEfYHB6hF82sKdZpUDFWkViLByLd1k1Ms')) {
    const [data] = SwapStruct.serialize({
        instructionDiscriminator: swapInstructionDiscriminator,
        ...args,
    });
    const keys = [
        {
            pubkey: accounts.payer,
            isWritable: true,
            isSigner: true,
        },
        {
            pubkey: accounts.market,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: accounts.traderBase,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: accounts.traderQuote,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: accounts.baseVault,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: accounts.quoteVault,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: accounts.tokenProgramBase,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey: accounts.baseMint,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey: accounts.tokenProgramQuote,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey: accounts.quoteMint,
            isWritable: false,
            isSigner: false,
        },
    ];
    if (accounts.global != null) {
        keys.push({
            pubkey: accounts.global,
            isWritable: true,
            isSigner: false,
        });
    }
    if (accounts.globalVault != null) {
        if (accounts.global == null) {
            throw new Error("When providing 'globalVault' then 'accounts.global' need(s) to be provided as well.");
        }
        keys.push({
            pubkey: accounts.globalVault,
            isWritable: true,
            isSigner: false,
        });
    }
    const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data,
    });
    return ix;
}
