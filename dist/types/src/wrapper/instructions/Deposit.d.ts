/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { DepositParams } from '../types/DepositParams';
/**
 * @category Instructions
 * @category Deposit
 * @category generated
 */
export type DepositInstructionArgs = {
    params: DepositParams;
};
/**
 * @category Instructions
 * @category Deposit
 * @category generated
 */
export declare const DepositStruct: beet.BeetArgsStruct<DepositInstructionArgs & {
    instructionDiscriminator: number;
}>;
/**
 * Accounts required by the _Deposit_ instruction
 *
 * @property [] manifestProgram
 * @property [_writable_, **signer**] owner
 * @property [_writable_] market
 * @property [_writable_] traderTokenAccount
 * @property [_writable_] vault
 * @property [_writable_] wrapperState
 * @property [] mint
 * @category Instructions
 * @category Deposit
 * @category generated
 */
export type DepositInstructionAccounts = {
    manifestProgram: web3.PublicKey;
    owner: web3.PublicKey;
    market: web3.PublicKey;
    traderTokenAccount: web3.PublicKey;
    vault: web3.PublicKey;
    tokenProgram?: web3.PublicKey;
    wrapperState: web3.PublicKey;
    mint: web3.PublicKey;
};
export declare const depositInstructionDiscriminator = 2;
/**
 * Creates a _Deposit_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Deposit
 * @category generated
 */
export declare function createDepositInstruction(accounts: DepositInstructionAccounts, args: DepositInstructionArgs, programId?: web3.PublicKey): web3.TransactionInstruction;
//# sourceMappingURL=Deposit.d.ts.map