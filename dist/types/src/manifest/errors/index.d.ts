/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
type ErrorWithCode = Error & {
    code: number;
};
type MaybeErrorWithCode = ErrorWithCode | null | undefined;
/**
 * InvalidMarketParameters: 'Invalid market parameters error'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidMarketParametersError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidDepositAccounts: 'Invalid deposit accounts error'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidDepositAccountsError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidWithdrawAccounts: 'Invalid withdraw accounts error'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidWithdrawAccountsError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidCancel: 'Invalid cancel error'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidCancelError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidFreeList: 'Internal free list corruption error'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidFreeListError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * AlreadyClaimedSeat: 'Cannot claim a second seat for the same trader'
 *
 * @category Errors
 * @category generated
 */
export declare class AlreadyClaimedSeatError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * PostOnlyCrosses: 'Matched on a post only order'
 *
 * @category Errors
 * @category generated
 */
export declare class PostOnlyCrossesError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * AlreadyExpired: 'New order is already expired'
 *
 * @category Errors
 * @category generated
 */
export declare class AlreadyExpiredError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InsufficientOut: 'Less than minimum out amount'
 *
 * @category Errors
 * @category generated
 */
export declare class InsufficientOutError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidPlaceOrderFromWalletParams: 'Invalid place order from wallet params'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidPlaceOrderFromWalletParamsError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * WrongIndexHintParams: 'Index hint did not match actual index'
 *
 * @category Errors
 * @category generated
 */
export declare class WrongIndexHintParamsError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * PriceNotPositive: 'Price is not positive'
 *
 * @category Errors
 * @category generated
 */
export declare class PriceNotPositiveError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * OrderWouldOverflow: 'Order settlement would overflow'
 *
 * @category Errors
 * @category generated
 */
export declare class OrderWouldOverflowError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * OrderTooSmall: 'Order is too small to settle any value'
 *
 * @category Errors
 * @category generated
 */
export declare class OrderTooSmallError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * Overflow: 'Overflow in token addition'
 *
 * @category Errors
 * @category generated
 */
export declare class OverflowError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * MissingGlobal: 'Missing Global account'
 *
 * @category Errors
 * @category generated
 */
export declare class MissingGlobalError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * GlobalInsufficient: 'Insufficient funds on global account to rest an order'
 *
 * @category Errors
 * @category generated
 */
export declare class GlobalInsufficientError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * IncorrectAccount: 'Account key did not match expected'
 *
 * @category Errors
 * @category generated
 */
export declare class IncorrectAccountError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidMint: 'Mint not allowed for market'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidMintError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * TooManyGlobalSeats: 'Cannot claim a new global seat, use evict'
 *
 * @category Errors
 * @category generated
 */
export declare class TooManyGlobalSeatsError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidEvict: 'Can only evict the lowest depositor'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidEvictError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export declare function errorFromCode(code: number): MaybeErrorWithCode;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export declare function errorFromName(name: string): MaybeErrorWithCode;
export {};
//# sourceMappingURL=index.d.ts.map