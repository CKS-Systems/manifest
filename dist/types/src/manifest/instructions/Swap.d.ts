/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { SwapParams } from '../types/SwapParams';
/**
 * @category Instructions
 * @category Swap
 * @category generated
 */
export type SwapInstructionArgs = {
    params: SwapParams;
};
/**
 * @category Instructions
 * @category Swap
 * @category generated
 */
export declare const SwapStruct: beet.BeetArgsStruct<SwapInstructionArgs & {
    instructionDiscriminator: number;
}>;
/**
 * Accounts required by the _Swap_ instruction
 *
 * @property [_writable_, **signer**] payer
 * @property [_writable_] market
 * @property [_writable_] traderBase
 * @property [_writable_] traderQuote
 * @property [_writable_] baseVault
 * @property [_writable_] quoteVault
 * @property [] tokenProgramBase
 * @property [] baseMint
 * @property [] tokenProgramQuote
 * @property [] quoteMint
 * @property [_writable_] global (optional)
 * @property [_writable_] globalVault (optional)
 * @category Instructions
 * @category Swap
 * @category generated
 */
export type SwapInstructionAccounts = {
    payer: web3.PublicKey;
    market: web3.PublicKey;
    traderBase: web3.PublicKey;
    traderQuote: web3.PublicKey;
    baseVault: web3.PublicKey;
    quoteVault: web3.PublicKey;
    tokenProgramBase: web3.PublicKey;
    baseMint: web3.PublicKey;
    tokenProgramQuote: web3.PublicKey;
    quoteMint: web3.PublicKey;
    global?: web3.PublicKey;
    globalVault?: web3.PublicKey;
};
export declare const swapInstructionDiscriminator = 4;
/**
 * Creates a _Swap_ instruction.
 *
 * Optional accounts that are not provided will be omitted from the accounts
 * array passed with the instruction.
 * An optional account that is set cannot follow an optional account that is unset.
 * Otherwise an Error is raised.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Swap
 * @category generated
 */
export declare function createSwapInstruction(accounts: SwapInstructionAccounts, args: SwapInstructionArgs, programId?: web3.PublicKey): web3.TransactionInstruction;
//# sourceMappingURL=Swap.d.ts.map